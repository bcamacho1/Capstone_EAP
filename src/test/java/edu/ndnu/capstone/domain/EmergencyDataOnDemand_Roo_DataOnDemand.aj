// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.ndnu.capstone.domain;

import edu.ndnu.capstone.domain.Emergency;
import edu.ndnu.capstone.domain.EmergencyDataOnDemand;
import edu.ndnu.capstone.domain.EmergencyService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect EmergencyDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EmergencyDataOnDemand: @Component;
    
    private Random EmergencyDataOnDemand.rnd = new SecureRandom();
    
    private List<Emergency> EmergencyDataOnDemand.data;
    
    @Autowired
    EmergencyService EmergencyDataOnDemand.emergencyService;
    
    public Emergency EmergencyDataOnDemand.getNewTransientEmergency(int index) {
        Emergency obj = new Emergency();
        setCreated(obj, index);
        setDescription(obj, index);
        setLocationId(obj, index);
        setStatusId(obj, index);
        setTypeId(obj, index);
        setUserId(obj, index);
        return obj;
    }
    
    public void EmergencyDataOnDemand.setCreated(Emergency obj, int index) {
        Calendar created = Calendar.getInstance();
        obj.setCreated(created);
    }
    
    public void EmergencyDataOnDemand.setDescription(Emergency obj, int index) {
        String description = "description_" + index;
        if (description.length() > 1024) {
            description = description.substring(0, 1024);
        }
        obj.setDescription(description);
    }
    
    public void EmergencyDataOnDemand.setLocationId(Emergency obj, int index) {
        Integer locationId = new Integer(index);
        obj.setLocationId(locationId);
    }
    
    public void EmergencyDataOnDemand.setStatusId(Emergency obj, int index) {
        Integer statusId = new Integer(index);
        obj.setStatusId(statusId);
    }
    
    public void EmergencyDataOnDemand.setTypeId(Emergency obj, int index) {
        Integer typeId = new Integer(index);
        obj.setTypeId(typeId);
    }
    
    public void EmergencyDataOnDemand.setUserId(Emergency obj, int index) {
        Integer userId = new Integer(index);
        obj.setUserId(userId);
    }
    
    public Emergency EmergencyDataOnDemand.getSpecificEmergency(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Emergency obj = data.get(index);
        Integer id = obj.getId();
        return emergencyService.findEmergency(id);
    }
    
    public Emergency EmergencyDataOnDemand.getRandomEmergency() {
        init();
        Emergency obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return emergencyService.findEmergency(id);
    }
    
    public boolean EmergencyDataOnDemand.modifyEmergency(Emergency obj) {
        return false;
    }
    
    public void EmergencyDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = emergencyService.findEmergencyEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Emergency' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Emergency>();
        for (int i = 0; i < 10; i++) {
            Emergency obj = getNewTransientEmergency(i);
            try {
                emergencyService.saveEmergency(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
